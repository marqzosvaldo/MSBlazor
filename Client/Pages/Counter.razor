@page "/counter"
@page "/counter/{CurrentCount:int}"


@inject IJSRuntime JSRuntime

<h1>Counter</h1>

<p>
  Current count:
  <span>@CurrentCount</span>
</p>
<button class="btn btn-primary" @onclick="IncrementCount">
  Click me
</button>
<input @ref="inputElement" @bind="CurrentCount" />


@code{
    private int currentCount = 0;
    private ElementReference inputElement;
    [Parameter]
    public int CurrentCount {
        get => currentCount;
        set {
            if (currentCount != value) {
                currentCount = value;
                JSRuntime.InvokeAsync<string>("blazorLocalStorage.set", nameof(CurrentCount), currentCount);
            }
        }
    }
    protected override async Task OnInitializedAsync() {
        try {
            var objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorLocalStorage.watch",objRef);

            int? c = await JSRuntime.InvokeAsync<int?>("blazorLocalStorage.get", nameof(CurrentCount));
            if (c.HasValue) {
                currentCount = c.Value;
            }
        } catch (Exception ex) {

            System.Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await JSRuntime.InvokeVoidAsync("blazorFocus.set", inputElement);
    }

    private void IncrementCount() => CurrentCount += 1;

    [JSInvokable]
    public async Task UpdateCounter(){
        Console.WriteLine("Update");
        int? c = await JSRuntime.InvokeAsync<int?>("blazorLocalStorage.get",nameof(CurrentCount));
        if (c.HasValue) {
            currentCount = c.Value; 
        }
        this.StateHasChanged(); 
    }
}